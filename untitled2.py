# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yN5aXh3HNgeBLqqtxBGPyU-k9dl1GUiv
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.linear_model import LinearRegression,Lasso
from sklearn.metrics import mean_squared_error,mean_absolute_error
from sklearn.ensemble import RandomForestRegressor 
import warnings
warnings.filterwarnings("ignore")

HousePriceP=pd.read_csv('HousePricePrediction.csv')
HousePriceP.head()

HousePriceP.shape

HousePriceP.isnull().sum()

HousePriceP=HousePriceP.dropna()

HousePriceP.isnull().sum()

HousePriceP.shape

HousePriceP.dtypes

plt.figure(figsize=(10,6))
corr = HousePriceP.corr()
sns.heatmap(corr,annot=True)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(10,6))
sns.regplot(x="YearRemodAdd", y="SalePrice", data= HousePriceP)

from scipy import stats
pearson_coef, p_value=stats.pearsonr(HousePriceP['YearRemodAdd'], HousePriceP['SalePrice'])
print("The pearson Correlation Cofficient is", pearson_coef, "with a P.value of P=", p_value)

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(10,6))
sns.regplot(x="LotArea", y="SalePrice", data= HousePriceP)

from scipy import stats
pearson_coef, p_value=stats.pearsonr(HousePriceP['YearRemodAdd'], HousePriceP['SalePrice'])
print("The pearson Correlation Cofficient is", pearson_coef, "with a P.value of P=", p_value)

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(10,6))
sns.regplot(x="YearBuilt", y="SalePrice", data= HousePriceP)

from scipy import stats
pearson_coef, p_value=stats.pearsonr(HousePriceP['YearRemodAdd'], HousePriceP['SalePrice'])
print("The pearson Correlation Cofficient is", pearson_coef, "with a P.value of P=", p_value)

sns.boxplot(x="BldgType", y="SalePrice", data = HousePriceP)

plt.figure(figsize=(10,6))
sns.boxplot(x="LotConfig", y="SalePrice", data=HousePriceP)

plt.figure(figsize=(10,6))
sns.boxplot(x="MSZoning", y="SalePrice", data=HousePriceP)

plt.figure(figsize=(10,6))
sns.boxplot(x="Exterior1st", y="SalePrice", data=HousePriceP)

HousePriceP.drop(['LotArea', 'BldgType'], axis = 1, inplace = True)

HousePriceP.shape

HousePriceP.describe()

HousePriceP['SalePrice']

HousePriceP.describe(include=['object'])

labelencoder = LabelEncoder()
HousePriceP.YearRemodAdd = labelencoder.fit_transform(HousePriceP.YearRemodAdd)
HousePriceP.YearBuilt = labelencoder.fit_transform(HousePriceP.YearBuilt)
HousePriceP.MSZoning = labelencoder.fit_transform(HousePriceP.MSZoning)
HousePriceP.Exterior1st = labelencoder.fit_transform(HousePriceP.Exterior1st)


HousePriceP.head(10)

import scipy.stats as stats
HousePriceP = stats.zscore(HousePriceP)

HousePriceP

x_train=HousePriceP.iloc[:,0:11]
y_train=HousePriceP.iloc[:,10]
x_test=HousePriceP.iloc[:,0:11]
y_test=HousePriceP.iloc[:,0:10]

x_train.head()

y_train.head()

from sklearn.model_selection import train_test_split
# splitting the data
x_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size = 0.2, random_state = 0) #20% testing data

#print the shape of train and test data after spltting
print (x_train.shape)
print (x_test.shape)

from sklearn.linear_model import LinearRegression
mlr = LinearRegression()
model_mlr = mlr.fit(x_train,y_train)

y_pred1 = model_mlr.predict(x_test)

MSE1 = mean_squared_error(y_test,y_pred1)
print('MSE is ', MSE1)

rf = RandomForestRegressor()
modelrf=rf.fit(x_train,y_train)

y_pred2 = modelrf.predict(x_test)

MSE2 = mean_squared_error(y_test,y_pred2)
print('MSE is ', MSE2)

scores = [('MLR', MSE1),('Random Forest', MSE2)]

MSE = pd.DataFrame(data = scores, columns=['Model', 'MSE Score'])
MSE

MSE.sort_values(by=(['MSE Score']), ascending=False, inplace=True)

f, axe = plt.subplots(1,1, figsize=(10,7))
sns.barplot(x =MSE['Model'], y=MSE['MSE Score'], ax = axe)
axe.set_xlabel('Mean Squared Error', size=20)
axe.set_ylabel('Model', size=20)

plt.show()